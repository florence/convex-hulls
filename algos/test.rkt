#lang typed/racket
(require typed/rackunit "shared.rkt"
         pfds/deque/real-time)


(: current-algo (Parameter Any))
(define current-algo (make-parameter #f))

(: make-test-case : (Listof Point) (Listof Point) -> (Huller -> Any))
(define (make-test-case ins outs) 
  (: expected-queue : (Deque Point))
  (define expected-queue
    (apply (inst deque Point) outs))
  (define result-length (length outs))
  (: swap : (Deque Point) -> (Deque Point))
  (define (swap d)
    (enqueue (head d)
             (tail d)))
  (lambda ([h : Huller])
    (define results (h ins))
    (check-equal? (length results) result-length)
    (check-not-false
     (let loop ([e expected-queue] [n result-length])
       (or (zero? n)
           (equal? results (deque->list e))
           (loop (swap e) (sub1 n)))))))

(define tests
  (list 
   (make-test-case
    '(1 0 0+1i 1+1i)
    '(1 0 0+1i 1+1i))
 
   (make-test-case
    '(10 0 0+10i 5+5i 10+10i)
    '(10 0 0+10i 10+10i))

   (make-test-case
    '(73.25319760531441+56.236020566230735i 43.19923105748121+62.65578969193472i 38.972466242745696+37.74676998004003i 62.689536152110264+74.1787305812467i 98.65127202611748+74.84834906815254i 2.155359393341392+67.24691748899825i 62.32421542783818+34.5937794347943i 51.03835745525355+75.95522087113955i 76.8177565381521+69.96352952804054i 74.98023732238582+48.11734143710892i 2.913620028655245+56.1265134036017i 35.782831320472155+47.99770662962532i 34.086570443110986+52.60549792994881i 37.71067773846676+73.31461160877626i 20.27961231202116+17.759416046135627i 21.02325325461377+95.93685426209115i 45.3353179485278+45.67064819771836i 44.912705105592835+42.55530874665645i 69.82041957178993+42.3015092955806i 43.72483558325293+48.39044064311047i 89.98677070159184+22.0880244613808i 74.40251262706018+32.538246882433555i 74.7309388229879+45.530657936833975i 84.7693108480037+51.81298675348827i 21.697155639904437+47.93596475503224i 46.79644874466129+63.62902590463058i 68.95146305885012+33.23236069109748i 99.9049865007917+45.253404538567814i 49.372787980739915+9.100570723701665i 61.53415292792952+17.062309666348696i)
    '(20.27961231202116+17.759416046135627i 49.372787980739915+9.100570723701665i 89.98677070159184+22.0880244613808i 99.9049865007917+45.253404538567814i 98.65127202611748+74.84834906815254i 21.02325325461377+95.93685426209115i 2.155359393341392+67.24691748899825i 2.913620028655245+56.1265134036017i))))


;; tests
(require "gift-wrap.rkt")

(: test : Huller -> Void)
(define (test h)
  (parameterize ([current-algo (object-name h)])
    (for-each (lambda ([f : (Huller -> Any)])
                (f h))
              tests)))
